Прежде чем описать структуру классов программы необходимо указать особенности библиотеки Qt. Основная особенность это механизм сигналов и слотов. Любой наследник QObject может иметь сигналы и слоты.
class MyClass :  public QObject{
Q_OBJECT
public slots:
	void MySlot(int n);
signals:
	void MySignal(int n);
}
 Слот это обычная функция с одной особенностью её можно соединить с сигналом. Сигнал синтаксически похож на функцию. Строка emit MySignal(235); равносильна вызову слота связанного с этим сигналом, с сигналом можно связать произвольное число слотов и можно изменять эти связи во время выполнения программы. Большинство классов Qt имеют слоты и высылают сигналы при изменении полей или других событиях.

Функции
Обозначено оранжевым цветом
Чтобы обеспечить работу с двумя типами функций применён паттерн стратегия. Класс funkcio обеспечивает общий интерфейс: возможность задания параметров функции и возврат её значения в точке. KvadratigantoFunkcio и RavinaFunkcio реализуют конкретные типы функций. Интерфейс funkcio избыточен, т.к. надо поддержать оба типа. Неиспользуемые параметры просто игнорируются.

Точка
Обозначено зелёным цветом
Стандартный класс двумерной точки — QPointF не высылает сигналы при своём изменении. Мы реализовали такую возможность. В результате можно связать объект точки и текстовые поля на форме в конструкторе окна, и в остальном коде не заботится о выводе координат в текстовые поля.
Для наследников QObject нельзя создавать конструктор копирования. Поэтому был создан класс DemonstrataQPointF полностью совместимый с QPointF и вызывающий SignalantoPorPointF::SendiSignaloj() при каждом своём изменении. SignalantoPorPointF высылает сигналы с новыми значениями координат. Каждому объекту DemonstrataQPointF должен соответствовать один объект SignalantoPorPointF.

